df2 . dropna ( subset = [ ` three ` , ` four ` , ` five ` ] , how = ` all ` )
a . insert ( 0 , k )
a = a [ : n ] + k + a [ n : ]
np . flatnonzero ( x ) . mean ( )
df [ ` just_date ` ] = df [ ` dates ` ] . dt . date
[ x for x in a if x not in b ]
[ ` ` . join ( x ) for x in a ]
list ( map ( ` ` . join , a ) )
re . split ( ` \ n \ \ s * \ n ` , s )
from functools import reduce reduce ( lambda x , y : 10 * x + y , [ 1 , 2 , 3 , 4 , 5 ] )
` ` ` { 0 : , . 2f } ` ` ` . format ( 24322 . 34 )
my_function ( * * data )
sum ( ( 1 for line in open ( ` myfile . txt ` ) ) )
def bufcount ( filename ) : f = open ( filename ) lines = 0 buf_size = ( 1024 * 1024 ) read_f = f . read buf = read_f ( buf_size ) while buf : lines + = buf . count ( ` \ n ` ) buf = read_f ( buf_size ) return lines
print ( round ( 1123 . 456789 , - 1 ) )
[ x for y , x in sorted ( zip ( Y , X ) ) ]
[ x for y , x in sorted ( zip ( Y , X ) ) ]
datetime . date ( 2010 , 6 , 16 ) . isocalendar ( ) [ 1 ]
df . iloc [ : , ( np . r_ [ 1 : 10 , ( 15 ) , ( 17 ) , 50 : 100 ] ) ]
df . groupby ( ` dummy ` ) . agg ( { ` returns ` : [ np . mean , np . sum ] } )
s . lower ( )
s . decode ( ` utf - 8 ` ) . lower ( )
ftp . retrbinary ( ` RETR % s ` % filename , file . write )
print ( my_string [ 0 : 100 ] )
legend ( numpoints = 1 )
dict ( ( x , set ( y ) & set ( d1 . get ( x , ( ) ) ) ) for x , y in d2 . items ( ) )
numpy . loadtxt ( open ( ` test . csv ` , ` rb ` ) , delimiter = ` , ` , skiprows = 1 )
Sample . objects . filter ( date__range = [ ` 2011 - 01 - 01 ` , ` 2011 - 01 - 31 ` ] )
Sample . objects . filter ( date__year = ` 2011 ` , date__month = ` 01 ` )
d [ ` dict3 ` ] = { ` spam ` : 5 , ` ham ` : 6 }
dict ( ( k , v ) for d in dicts for k , v in list ( d . items ( ) ) )
print ( ` your string ` . decode ( ` string_escape ` ) )
sum ( [ True , True , False , False , False , True ] )
fig . set_size_inches ( w , h , forward = True )
` hello there % ( 5 ) s ` % { ` 5 ` : ` you ` }
map ( int , example_string . split ( ` , ` ) )
[ int ( s ) for s in example_string . split ( ` , ` ) ]
x = [ i [ 0 ] for i in x ]
y = map ( operator . itemgetter ( 0 ) , x )
y = [ i [ 0 ] for i in x ]
results = [ item [ ` value ` ] for item in test_data ]
datetime . datetime . now ( ) . isoformat ( )
datetime . datetime . utcnow ( ) . isoformat ( )
df . apply ( ` ` . join , axis = 0 )
pd . Data Frame ( df . values - df2 . values , columns = df . columns )
print ( open ( ` myfile . txt ` , ` U ` ) . read ( ) )
print ( line . decode ( ` utf - 16 - le ` ) . split ( ) )
file = io . open ( ` data . txt ` , ` r ` , encoding = ` utf - 16 - le ` )
s1 = pd . merge ( df1 , df2 , how = ` inner ` , on = [ ` user_id ` ] )
foo . decode ( ` utf8 ` ) . encode ( ` utf8 ` )
a . shape
N . shape ( a )
N . shape ( a )
a . shape
[ i for i , v in enumerate ( L ) if v [ 0 ] = = 53 ]
struct . unpack ( ` < L ` , ` y \ xcc \ xa6 \ xbb ` ) [ 0 ]
arr [ [ 0 , 1 , 1 ] , [ 1 , 0 , 2 ] ]
list ( powerset ( ` abcd ` ) )
s in [ ` true ` , ` 1 ` , ` t ` , ` y ` , ` yes ` , ` yeah ` , ` yup ` , ` certainly ` , ` uh - huh ` ]
urllib . parse . quote ( ` http : / / spam . com / go / ` )
plt . savefig ( ` test . svg ` )
len ( my Array )
sys . path . insert ( 0 , ` . / path / to / your / modules / ` )
ax . xaxis . set_ticks_position ( ` top ` )
cursor . execute ( ` INSERT OR REPLACE INTO master . table1 SELECT * FROM table1 ` )
int ( ` deadbeef ` , 16 )
int ( ` a ` , 16 )
int ( ` 0xa ` , 16 )
int ( s , 16 )
int ( hex String , 16 )
print ( ` Value is ` ` + str ( value ) + ` ` ` )
print ( ` Value is ` { } ` ` . format ( value ) )
{ { tags | join ( ` ` ) } }
help ( ` modules ` )
[ [ [ x [ 0 ] ] for x in list D [ i ] ] for i in range ( len ( list D ) ) ]
sorted ( s , key = str . upper )
sorted ( sorted ( s ) , key = str . upper )
sorted ( s , key = str . lower )
pd . merge ( df1 , df2 , on = [ ` A ` , ` B ` , ` C ` , ` D ` ] , how = ` inner ` )
dict ( ( v , k ) for k , v in map . items ( ) )
s . decode ( ` unicode_escape ` )
[ int ( i ) for i in str_list ]
map ( int , [ ` 1 ` , ` 2 ` , ` 3 ` ] )
list ( map ( int , [ ` 1 ` , ` 2 ` , ` 3 ` ] ) )
soup . find_all ( ` a ` , href = re . compile ( ` http : / / www \ \ . iwashere \ \ . com / ` ) )
soup . find_all ( ` a ` , href = re . compile ( ` ^ ( ? ! ( ? : [ a - z A - Z ] [ a - z A - Z0 - 9 + . - ] * : | / / ) ) ` ) )
subprocess . call ( [ ` java ` , ` - jar ` , ` Blender . jar ` ] )
cursor . execute ( ` INSERT INTO table ( ` column1 ` ) VALUES ( % s ) ` , ( value , ) )
if url . endswith ( ` . com ` ) : url = url [ : ( - 4 ) ]
url = re . sub ( ` \ \ . com $ ` , ` ` , url )
print ( url . replace ( ` . com ` , ` ` ) )
if ( not text . endswith ( suffix ) ) : return text return text [ : ( len ( text ) - len ( suffix ) ) ]
print ( ` , , ` . join ( [ str ( i [ 0 ] ) for i in mytuple ] ) )
max ( min ( my_value , max_value ) , min_value )
re . findall ( ` \ \ w + | [ ^ \ \ w \ \ s ] ` , text , re . UNICODE )
result = db . engine . execute ( ` < sql here > ` )
sys . exit ( 0 )
` ` ` ` ` ` . join ( c for c in my_string if c . isdigit ( ) )
re . split ( ` + ` , str1 )
re . findall ( ` \ \ S + ` , str1 )
getattr ( getattr ( myobject , ` id ` , None ) , ` number ` , None )
{ i : ( i * 2 ) for i in range ( 10 ) }
dict ( ( i , i * 2 ) for i in range ( 10 ) )
plt . cla ( )
total = sum ( float ( item ) for item in s . split ( ` , ` ) )
bin ( ord ( ` P ` ) )
print ( my_string . split ( ` , ` , 1 ) [ 1 ] )
print ( data [ ` places ` ] [ 0 ] [ ` post code ` ] )
word = re . sub ( ` ( [ aeiou ] ) : ( ( [ aeiou ] [ ^ aeiou ] * ) { 3 } ) $ ` , ` \ \ 1 \ \ 2 ` , word )
json . loads ( ` { ` foo ` : 42 , ` bar ` : ` baz ` } ` ) [ ` bar ` ]
data = json . loads ( array )
data = json . loads ( array )
df . plot ( x = ` col_name_1 ` , y = ` col_name_2 ` , style = ` o ` )
parsed_html = Beautiful Soup ( html ) print ( parsed_html . body . find ( ` div ` , attrs = { ` class ` : ` container ` , } ) . text )
page = urllib . request . urlopen ( ` http : / / www . google . com / ` ) soup = Beautiful Soup ( page )
plt . figure ( figsize = ( 3 , 4 ) )
s . translate ( None , string . punctuation )
base64 . urlsafe_b64decode ( uenc . encode ( ` ascii ` ) )
len ( dict_test ) + sum ( len ( v ) for v in dict_test . values ( ) )
hex ( d ) . split ( ` x ` ) [ 1 ]
list ( str ( 123 ) )
[ int ( x ) for x in str ( num ) ]
br . select_form ( nr = 0 )
json . load ( codecs . open ( ` sample . json ` , ` r ` , ` utf - 8 - sig ` ) )
json . loads ( open ( ` sample . json ` ) . read ( ) . decode ( ` utf - 8 - sig ` ) )
server = smtplib . SMTP ( ` smtp . gmail . com ` , 587 )
int ( ` { : 08b } ` . format ( n ) [ : : - 1 ] , 2 )
df . set_index ( [ ` d ` ] , append = True )
for ( key , value ) in d . items ( ) : pass
for ( key , value ) in list ( d . items ( ) ) : pass
for ( letter , number ) in list ( d . items ( ) ) : pass
for ( k , v ) in list ( d . items ( ) ) : pass
list ( d . items ( ) )
list ( d . items ( ) )
for ( k , v ) in list ( d . items ( ) ) : pass
for ( letter , number ) in list ( d . items ( ) ) : pass
for ( letter , number ) in list ( d . items ( ) ) : pass
session . query ( Task ) . filter ( Task . time_spent > timedelta ( hours = 3 ) ) . all ( )
os . system ( ` msbuild project . sln / p : Configuration = Debug ` )
max ( list ( My Count . keys ( ) ) , key = int )
my_function . __name__
my_function . __name__
np . all ( a = = a [ ( 0 ) , : ] , axis = 0 )
sorted ( a , key = lambda x : ( sum ( x [ 1 : 3 ] ) , x [ 0 ] ) )
sorted ( a , key = lambda x : ( sum ( x [ 1 : 3 ] ) , x [ 0 ] ) , reverse = True )
sorted ( lst , key = lambda x : ( sum ( x [ 1 : ] ) , x [ 0 ] ) )
sorted ( lst , key = lambda x : ( sum ( x [ 1 : ] ) , x [ 0 ] ) , reverse = True )
response . headers [ ` WWW - Authenticate ` ] = ` Basic realm = ` test ` `
del request . session [ ` mykey ` ]
datetime . datetime . strptime ( ` 24052010 ` , ` % d % m % Y ` ) . date ( )
re . sub ( ` [ ^ \ \ x00 - \ \ x7F ] + ` , ` ` , text )
numpy . array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] )
my List = [ i for i in range ( 10 ) ]
[ m [ 0 ] for m in re . compile ( ` ( ( . + ? ) \ \ 2 + ) ` ) . findall ( ` 44442 ( 2 ) 2 ( 2 ) 44 ` ) ]
[ i [ 0 ] for i in re . findall ( ` ( ( \ \ d ) ( ? : [ ( ) ] * \ \ 2 * [ ( ) ] * ) * ) ` , s ) ]
fig . subplots_adjust ( wspace = 0 , hspace = 0 )
x [ : : - 1 ]
json . dumps ( { ` apple ` : ` cat ` , ` banana ` : ` dog ` , ` pear ` : ` fish ` } )
csvwriter . writerow ( row )
re . split ( ` ( ? < = [ \ \ . \ \ ? ! ] ) ` , text )
re . compile ( ` \ xe2 \ x80 \ x93 ` )
variable = [ ]
intarray = array ( ` i ` )
[ sublist [ : : - 1 ] for sublist in to_reverse [ : : - 1 ] ]
re . sub ( ` [ ^ 0 - 9a - z A - Z ] + ` , ` * ` , ` h ^ & ell ` . , | o w ] { + orld ` )
` ` ` ` ` ` . join ( [ ` I ` , ` < ` , ` 3s U ` , ` & ` , ` you luvz me ` ] )
logging . disable ( logging . CRITICAL )
df [ ` Date Str ` ] = df [ ` Date Obj ` ] . dt . strftime ( ` % d % m % Y ` )
s . split ( ` @ ` ) [ 0 ]
df . query ( ` index < @ start_remove or index > @ end_remove ` )
df . loc [ ( df . index < start_remove ) | ( df . index > end_remove ) ]
df . isnull ( ) . sum ( )
df . reset_index ( inplace = True )
[ x [ ` value ` ] for x in list_of_dicts ]
[ d [ ` value ` ] for d in l ]
[ d [ ` value ` ] for d in l if ` value ` in d ]
np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) . tolist ( )
ast . literal_eval ( ` ( 1 , 2 , 3 , 4 ) ` )
data List . sort ( key = lambda x : x [ 1 ] )
list ( map ( list , set ( map ( lambda i : tuple ( i ) , testdata ) ) ) )
[ list ( i ) for i in set ( tuple ( i ) for i in testdata ) ]
return user . groups . filter ( name = ` Member ` ) . exists ( )
return user . groups . filter ( name__in = [ ` group1 ` , ` group2 ` ] ) . exists ( )
logging . get Logger ( ) . set Level ( logging . DEBUG )
` ` ` ` ` ` . join ( str ( i ) for i in ( 34 . 2424 , - 64 . 2344 , 76 . 3534 , 45 . 2344 ) )
` ` ` ` ` ` . join ( [ s [ x : x + 2 ] [ : : - 1 ] for x in range ( 0 , len ( s ) , 2 ) ] )
plt . savefig ( ` graph . png ` , dpi = 1000 )
my_list = [ [ x for x in sublist if x not in to_del ] for sublist in my_list ]
[ item for item in a if 1 in item ]
[ item for item in a if item [ 0 ] = = 1 ]
{ p . id : { ` id ` : p . id , ` position ` : ind } for ind , p in enumerate ( p_list ) }
[ dict ( y ) for y in set ( tuple ( x . items ( ) ) for x in d ) ]
exec ( compile ( open ( ` file . py ` ) . read ( ) , ` file . py ` , ` exec ` ) )
rows = session . query ( Congress ) . count ( )
subprocess . call ( [ ` test . sh ` , str ( domid ) ] )
dfs = pd . read_excel ( file_name , sheetname = None )
struct . unpack ( ` d ` , binascii . unhexlify ( ` 4081637ef7d0424a ` ) )
a [ tuple ( b ) ]
map ( list , permutations ( [ 2 , 3 , 4 ] ) )
sorted ( unsorted_list , key = presorted_list . index )
datetime . datetime . now ( ) - datetime . timedelta ( days = 1 )
d = pd . Data Frame ( 0 , index = np . arange ( len ( data ) ) , columns = feature_list )
x . find ( ` World ` )
x . find ( ` Aloha ` )
` sdfasdf ` . index ( ` cc ` )
` sdfasdf ` . index ( ` df ` )
str . find ( ` a ` )
str . find ( ` g ` )
str . find ( ` s ` , 11 )
str . find ( ` s ` , 15 )
str . find ( ` s ` , 16 )
str . find ( ` s ` , 11 , 14 )
sorted ( d , key = lambda x : datetime . datetime . strptime ( x , ` % m - % Y ` ) )
re . split ( ` \ \ . \ \ s ` , text )
re . split ( ` \ \ . \ \ s ` , re . sub ( ` \ \ . \ \ s * $ ` , ` ` , text ) )
` ` ` foobar ` ` ` [ : 4 ]
s . rfind ( ` & ` )
s [ : s . rfind ( ` & ` ) ]
driver . find_element_by_xpath ( ` / / option [ @ value = ` ` + state + ` ` ] ` ) . click ( )
with open ( ` test . txt ` , ` a ` ) as myfile : myfile . write ( ` appended text ` )
with open ( ` foo ` , ` a ` ) as f : f . write ( ` cool beans . . . ` )
with open ( ` test1 ` , ` ab ` ) as f : pass
open ( ` test ` , ` a + b ` ) . write ( ` koko ` )
print ( [ i for i in re . split ( ` ( [ \ \ d . ] + | \ \ W + ) ` , ` x + 13 . 5 * 10x - 4e1 ` ) if i ] )
re . findall ( ` [ \ u4e00 - \ u9fff ] + ` , ipath )
s . split ( ` s ` )
subprocess . Popen ( [ ` rm ` , ` - r ` , ` some . file ` ] )
dict ( ( d [ ` name ` ] , d ) for d in listofdict )
datetime . datetime . now ( ) . strftime ( ` % Y - % m - % d % H : % M ` )
time . strftime ( ` % Y - % m - % d % H : % M ` )
re . findall ( ` [ bcdfghjklmnpqrstvwxyz ] + ` , ` CONCERTATION ` , re . IGNORECASE )
[ i for i , e in enumerate ( a ) if e ! = 0 ]
map ( int , re . findall ( ` \ \ d + ` , string1 ) )
os . path . dirname ( sys . executable )
ax . xaxis . set_label_position ( ` top ` )
ax . xaxis . tick_top ( )
ax . xaxis . set_ticks_position ( ` top ` )
datetime . strptime ( ` 2015 / 01 / 01 12 : 12am ` , ` % Y / % m / % d % I : % M % p ` )
img = Image . open ( ` picture . jpg ` ) img . show ( )
img = Image . open ( ` picture . jpg ` ) Img . show
sys . exit ( 0 )
sys . exit ( ` aa ! errors ! ` )
sys . exit ( )
[ max ( abs ( x ) for x in arr [ i : i + 4 ] ) for i in range ( 0 , len ( arr ) , 4 ) ]
os . chdir ( ` c : \ \ Users \ \ uname \ \ desktop \ \ python ` )
os . chdir ( path )
no_integers = [ x for x in mylist if not isinstance ( x , int ) ]
tree . xpath ( ` . / / a [ text ( ) = ` Example ` ] ` ) [ 0 ] . tag
` ` ` , ` ` ` . join ( [ ( str ( k ) + ` ` + str ( v ) ) for k , v in list ( a . items ( ) ) ] )
print ( set ( re . sub ( ` [ \ x00 - \ x7f ] ` , ` ` , ` \ xa3 \ u20ac \ xa3 \ u20ac ` ) ) )
print ( re . sub ( ` [ \ x00 - \ x7f ] ` , ` ` , ` \ xa3100 is worth more than \ u20ac100 ` ) )
ast . literal_eval ( ` { ` muffin ` : ` lolz ` , ` foo ` : ` kitty ` } ` )
print ( t . decode ( ` unicode_escape ` ) )
print ( str . encode ( ` cp1252 ` ) . decode ( ` utf - 8 ` ) . encode ( ` cp1252 ` ) . decode ( ` utf - 8 ` ) )
zip ( list_a , list_b )
list ( zip ( a , b ) )
df . set_index ( ` id ` ) . to_dict ( )
df . set_index ( ` id ` ) [ ` value ` ] . to_dict ( )
sorted ( list ( mydict . items ( ) ) , key = lambda a : map ( int , a [ 0 ] . split ( ` . ` ) ) )
re . sub ( ` \ \ ( [ ^ ) ] * \ \ ) ` , ` ` , filename )
` ` ` a b ` ` ` . replace ( ` ` , ` ` ) . isalpha ( )
[ ( x + y ) for x , y in zip ( first , second ) ]
sorted ( list ( a_dict . items ( ) ) , key = lambda item : item [ 1 ] [ 1 ] )
re . compile ( ` [ ^ a - z A - Z0 - 9 - ] + ` )
sorted ( list ( range ( len ( a ) ) ) , key = lambda i : a [ i ] ) [ - 2 : ]
zip ( * sorted ( enumerate ( a ) , key = operator . itemgetter ( 1 ) ) ) [ 0 ] [ - 2 : ]
sorted ( list ( range ( len ( a ) ) ) , key = lambda i : a [ i ] , reverse = True ) [ : 2 ]
list ( x . keys ( ) ) . index ( ` c ` )
print ( ` { 0 : + d } ` . format ( score ) )
[ k for k , g in itertools . groupby ( [ 1 , 2 , 2 , 3 , 2 , 2 , 4 ] ) ]
` ` ` 0 , 1 , 2 ` ` ` . split ( ` , ` )
[ int ( x ) for x in ` 0 , 1 , 2 ` . split ( ` , ` ) ]
dict ( [ ( ` A ` , 1 ) , ( ` B ` , 2 ) , ( ` C ` , 3 ) ] )
np . savetxt ( ` test . txt ` , x )
direct_output = subprocess . check_output ( ` ls ` , shell = True )
df [ df . columns - [ ` T1_V6 ` ] ]
( ( 25 < a ) & ( a < 100 ) ) . sum ( )
date . today ( ) . strftime ( ` % A ` )
re . search ( ` \ \ bis \ \ b ` , your_string )
{ { car . date_of_manufacture . strftime ( ` % Y - % m - % d ` ) } }
[ item for sublist in l for item in sublist ]
list ( itertools . chain ( * list2d ) )
list ( itertools . chain . from_iterable ( list2d ) )
ord ( ` a ` )
re . sub ( ` ( ? m ) ^ [ ^ \ \ S \ \ n ] + ` , ` ` , ` a \ n b \ n c \ nd e ` )
re . sub ( ` ( ? m ) ^ \ \ s + ` , ` ` , ` a \ n b \ n c ` )
a , b , c = [ 1 , 2 , 3 ]
[ list ( v ) for k , v in itertools . groupby ( mylist , key = lambda x : x [ : 5 ] ) ]
line = re . sub ( ` \ \ ( + as . * ? \ \ ) ` , ` ` , line )
print ( line . rstrip ( ` \ n ` ) )
df . index . values . tolist ( )
if ( not a ) : pass
if ( not seq ) : pass
if ( len ( li ) = = 0 ) : pass
[ i for i , v in enumerate ( a ) if v > 4 ]
sorted ( yourdata , reverse = True )
sorted ( yourdata , key = lambda d : d . get ( ` key ` , { } ) . get ( ` subkey ` ) , reverse = True )
yourdata . sort ( key = lambda e : e [ ` key ` ] [ ` subkey ` ] , reverse = True )
df . round ( )
gca ( ) . get_lines ( ) [ n ] . get_xydata ( )
A [ : , - 2 : ]
request . GET . get ( ` username ` , ` ` )
pprint ( dict ( list ( o . items ( ) ) ) )
url ( ` ^ $ ` , include ( ` sms . urls ` ) ) ,
url ( ` ^ ` , include ( ` sms . urls ` ) ) ,
max_item = max ( a_list , key = operator . itemgetter ( 1 ) )
max ( a_list , key = operator . itemgetter ( 1 ) )
s . resample ( ` 3M ` , how = ` sum ` )
[ a [ i ] for i in ( 1 , 2 , 5 ) ]
[ line for line in open ( ` textfile ` ) if ` apple ` in line ]
datetime . datetime . strptime ( s , ` % Y - % m - % d T % H : % M : % SZ ` )
pandas . read_csv ( filename , sep = ` \ t ` , lineterminator = ` \ r ` )
` longlong TESTstring TEST ` . replace ( ` TEST ` , ` ? ` , 1 )
archive . write ( pdffile , os . path . basename ( pdffile ) )
dict ( x [ 1 : ] for x in reversed ( my List Of Tuples ) )
[ ( x1 - x2 ) for x1 , x2 in zip ( List1 , List2 ) ]
string [ 0 ] . isdigit ( )
strg . startswith ( ( ` 0 ` , ` 1 ` , ` 2 ` , ` 3 ` , ` 4 ` , ` 5 ` , ` 6 ` , ` 7 ` , ` 8 ` , ` 9 ` ) )
print ( os . path . dirname ( os . path . realpath ( __file__ ) ) )
re . split ( ` ( ? < = \ \ ? | ! | \ \ . ) \ \ s { 0 , 2 } ( ? = [ A - Z ] | $ ) ` , text )
plt . scatter ( * zip ( * li ) )
tuple ( zip ( * t ) )
df . groupby ( np . arange ( len ( df . columns ) ) / / 3 , axis = 1 ) . mean ( )
` ` ` ` ` ` . join ( chr ( i ) for i in L )
sum ( x = = chosen_value for x in list ( d . values ( ) ) )
sum ( 1 for x in list ( d . values ( ) ) if some_condition ( x ) )
struct . unpack ( ` f ` , struct . pack ( ` f ` , 0 . 00582811585976 ) )
timestamp = ( dt - datetime ( 1970 , 1 , 1 ) ) . total_seconds ( )
df . sort ( ` m ` )
print ( bool ( a ) )
df = df . rename ( index = { last : ` a ` } )
km . fit ( x . reshape ( - 1 , 1 ) )
sorted ( words , key = lambda x : ` a ` + x if x . startswith ( ` s ` ) else ` b ` + x )
webbrowser . open ( ` http : / / somesite . com / adminpanel / index . php ` )
dict ( ( k , v ) for k , v in parent_dict . items ( ) if 2 < k < 4 )
dict ( ( k , v ) for k , v in parent_dict . items ( ) if k > 2 and k < 4 )
[ list ( x ) for x in zip ( * sorted ( zip ( list1 , list2 ) , key = lambda pair : pair [ 0 ] ) ) ]
sum ( ( ( i > 5 ) for i in j ) )
len ( [ 1 for i in j if ( i > 5 ) ] )
j = np . array ( j ) sum ( ( j > i ) )
[ ( x + tuple ( y ) ) for x , y in zip ( zip ( a , b ) , c ) ]
os . chmod ( path , stat . S_IRUSR | stat . S_IRGRP | stat . S_IROTH )
parser . add_argument ( ` file ` , nargs = ` * ` )
z = [ ( i = = j ) for i , j in zip ( x , y ) ]
[ ( x [ i ] = = y [ i ] ) for i in range ( len ( x ) ) ]
[ int ( s ) for s in re . findall ( ` \ \ b \ \ d + \ \ b ` , ` he33llo 42 I ` m a 32 string 30 ` ) ]
df2 = pd . Data Frame ( index = df1 . index )
struct . unpack ( ` h ` , p S [ 0 : 2 ] )
print ( ` \ n ` . join ( ` ` . join ( map ( str , row ) ) for row in t ) )
df . sort_values ( by = ` Date ` )
driver . find_element_by_name ( ` < check_box_name > ` ) . is_selected ( )
driver . find_element_by_id ( ` < check_box_id > ` ) . is_selected ( )
[ ( a if a else 2 ) for a in [ 0 , 1 , 0 , 3 ] ]
` M \ \ N { AMPERSAND } M \ \ N { APOSTROPHE } s ` . decode ( ` unicode - escape ` )
chr ( int ( ` fd9b ` , 16 ) ) . encode ( ` utf - 8 ` )
print ( ` 0x % X ` % value )
cleaned = [ x for x in your_list if x ]
slice ( * [ ( int ( i . strip ( ) ) if i else None ) for i in string_slice . split ( ` : ` ) ] )
soup . find_all ( [ ` a ` , ` div ` ] )
print ( func . __name__ )
` ` ` ` ` ` . join ( ` { } { } ` . format ( key , val ) for key , val in sorted ( adict . items ( ) ) )
` ` ` ` ` ` . join ( ` { } { } ` . format ( key , val ) for key , val in list ( adict . items ( ) ) )
new_list = old_list [ : ]
new_list = list ( old_list )
new_list = copy . copy ( old_list )
new_list = copy . deepcopy ( old_list )
[ i for i in old_list ]
plt . legend ( frameon = False )
` ` ` \ \ ud83d \ \ ude4f ` ` ` . encode ( ` utf - 16 ` , ` surrogatepass ` ) . decode ( ` utf - 16 ` )
globals ( ) [ ` myfunction ` ] ( )
urllib . request . urlopen ( ` http : / / www . stackoverflow . com ` ) . getcode ( )
conn = httplib . HTTPConnection ( ` www . python . org ` ) conn . request ( ` HEAD ` , ` / ` ) r1 = conn . getresponse ( ) print ( r1 . status , r1 . reason )
r = requests . head ( url ) return ( r . status_code = = 200 )
print ( urllib . request . urlopen ( ` http : / / www . stackoverflow . com ` ) . getcode ( ) )
driver . find_element_by_css_selector ( ` a [ href ^ = ` javascript ` ] ` ) . click ( )
df . to_pickle ( file_name )
df . groupby ( by = df . columns , axis = 1 ) . mean ( )
bar . sort ( key = lambda x : ( x . attrb1 , x . attrb2 ) , reverse = True )
alpha = img . split ( ) [ - 1 ]
[ len ( x ) for x in s . split ( ) ]
soup . find All ( ` div ` , style = ` width = 300px ; ` )
cursor . execute ( sql , list ( my Dict . values ( ) ) )
df . to_csv ( ` Result . csv ` , index = False , sep = ` ` )
globals ( ) . update ( vars ( args ) )
re . findall ( ` \ \ [ ( . * ? ) \ \ ] ` , mystring )
print ( ` % . 2f kg = % . 2f lb = % . 2f gal = % . 2f l ` % ( var1 , var2 , var3 , var4 ) )
d = dict ( ( k , v ) for k , v in d . items ( ) if v > 0 )
d = { k : v for k , v in list ( d . items ( ) ) if v > 0 }
pd . to_datetime ( pd . Series ( date_stngs ) )
df . iloc [ 2 , 0 ]
matplotlib . rc Params . update ( { ` font . size ` : 22 } )
pd . Data Frame ( list ( d . items ( ) ) , columns = [ ` Date ` , ` Date Value ` ] )
pd . Data Frame ( df . values * df2 . values , columns = df . columns , index = df . index )
re . findall ( ` \ \ d + \ \ . \ \ d + ` , ` Current Level : 13 . 4 db . ` )
re . findall ( ` [ - + ] ? \ \ d * \ \ . \ \ d + | \ \ d + ` , ` Current Level : - 13 . 2 db or 14 . 2 or 3 ` )
zip ( it , it , it )
df [ ` x ` ] . str . lower ( )
jsobj [ ` a ` ] [ ` b ` ] [ ` e ` ] . append ( { ` f ` : var6 , ` g ` : var7 , ` h ` : var8 } )
` ` ` ` ` ` . join ( lst )
sum ( v for v in list ( d . values ( ) ) if v > 0 )
app . run ( debug = True )
df . drop ( df . index [ [ 1 , 3 ] ] , inplace = True )
df . apply ( lambda x : x . fillna ( x . mean ( ) ) , axis = 0 )
[ o . my_attr for o in my_list ]
time . strftime ( ` % m / % d / % Y ` , time . gmtime ( os . path . getmtime ( file ) ) )
all ( item in list ( superset . items ( ) ) for item in list ( subset . items ( ) ) )
[ str ( wi ) for wi in wordids ]
df2 = df . reset_index ( )
dt . strftime ( ` % m / % d / % Y ` )
print ( ` Total cost is : $ { : , . 2f } ` . format ( Total Amount ) )
df . groupby ( np . arange ( len ( df . columns ) ) / / 2 + 1 , axis = 1 ) . sum ( ) . add_prefix ( ` s ` )
random List = [ random . random ( ) for _ in range ( 10 ) ]
print ( soup . find ( ` a ` , href = re . compile ( ` . * follow \ \ ? page . * ` ) ) )
sys . stdout . flush ( )
country , capital = random . choice ( list ( d . items ( ) ) )
list ( ` Word to Split ` )
[ w for w in open ( ` file . txt ` ) if not re . search ( ` [ aeiou ] { 2 } ` , w ) ]
pat = re . compile ( ` ^ \ \ d { 1 , 3 } \ \ . \ \ d { 1 , 3 } \ \ . \ \ d { 1 , 3 } \ \ . \ \ d { 1 , 3 } $ ` )
exec ( compile ( open ( ` filename . py ` ) . read ( ) , ` filename . py ` , ` exec ` ) )
session . query ( Tag ) . distinct ( Tag . name ) . group_by ( Tag . name ) . count ( )
df = df . dropna ( axis = 1 , how = ` all ` )
all ( x . count ( 1 ) = = 3 for x in L )
[ x [ 0 ] for x in l1 if any ( x [ 0 ] = = y [ 0 ] for y in l2 ) ]
tex . delete ( ` 1 . 0 ` , END )
datetime . datetime . fromtimestamp ( my Number ) . strftime ( ` % Y - % m - % d % H : % M : % S ` )
system ( ` python myscript . py ` )
your_list . sort ( key = operator . attrgetter ( ` anniversary_score ` ) )
your_list . sort ( key = lambda x : x . anniversary_score )
print ( type ( tf . Session ( ) . run ( tf . constant ( [ 1 , 2 , 3 ] ) ) ) )
list ( itertools . chain ( * a ) )
count . setdefault ( ` a ` , 0 )
df . groupby ( [ ` cluster ` ] ) . mean ( )
min ( my List , key = lambda x : abs ( x - my Number ) )
any ( x in string for x in search )
print ( pattern . search ( url ) . group ( 1 ) )
( s . factorize ( ) [ 0 ] + 1 ) . astype ( ` float ` )
C = [ ( a - b ) for a , b in zip ( A , B ) ]
